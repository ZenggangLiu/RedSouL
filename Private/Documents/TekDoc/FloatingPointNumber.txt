--- 16位浮点数Bit Pattern表示如下 ---
15 (msb)
|
| 14  10
| |   |
| |   | 9        0 (lsb)
| |   | |        |
v v   v v        v
X XXXXX abcdefghij
|1| 5 | |<--10-->|
 s  e        m
s: 符号位(sign bit)       : 一位
e: 指数位(exponential bit): 五位: 真正的指数为：存储的数值 - 15。可表示范围为：[-15, +16]
m: 尾数位(significand bit): 十位
Normalized浮点数二进制表示形式为1.0010010011
十进制计算方法：S * 2^(e-15) * (1 + a*2^-1 + b*2^-2 + ... + j*2^-10)
De-Normalized浮点数二进制表示形式为0.0010010011
十进制计算方法: S * 2^(-14)  * (0 + a*2^-1 + b*2^-2 + ... + j*2^-10)

特殊Patterns：
1. 指数位为0: e = 0: 使用的指数为：2^(-15)。此Pattern用来表示零或者De-Normalized的数值
- ZERO: 符号位为：0或者1，指数位：0: 2^(-15)， 尾数位：0
  2^(-15) * (0*2^0 + 0)
  0x0000: +0
  0x8000: -0
- De-Normalized的数值: 我们使用2^(-14)而不是2^(-15)
  0x0001: 2^(-14)*(0*2^0 + 1*2^(-10)): 对于数值为0.000000059604644775390625
2. 指数位为1: e = 1: 2^(-14) 
- 最小的正数: 0 000 01 00 0000 0000
  0x0400: 2^(-14)*(1*2^0): 0.00006103515625
3. e = 15: 2^0
- ONE: 2^0*(1*2^0 + 0) = 1
  0x3C00
4. e = 30: 2^(15)
- 最大正数
  0x7BFF
  - 2^(15)*(1*2^0 + 1*2^-1 + ... 1 * 2^(-10)) = 2^(15) * 1.9990234375
          = 65504
5. e = 31: 2^(16)
- infinity: m == 0: 0x7C00
- NaN     : m != 0: 0x7C01


--- 32位浮点数Bit Pattern表示如下 ---
31 (msb)
|
| 30     23
| |      |
| |      | 22                    0 (lsb)
| |      | |                     |
v v      v v                     v
X XXXXXXXX XXXXXXXXXXXXXXXXXXXXXXX
|1| <-8->| |<--       23      -->|
 s    e               m
s: 符号位(sign bit)       : 1bit
e: 指数位(exponential bit): 8bits: the real exponential = e - 127: [-127, +128]
m: 尾数位(significand bit): 23bits
Normalized浮点数二进制表示形式为1.0010010011
十进制计算方法：S * 2^(e-127) * (1 + a*2^-1 + b*2^-2 + ... + j*2^-23)
De-Normalized浮点数二进制表示形式为0.0010010011
十进制计算方法: S * 2^(-126)  * (0 + a*2^-1 + b*2^-2 + ... + j*2^-23)

特殊Patterns：
1. 指数位为0: e = 0: 使用的指数为：2^(-127)。此Pattern用来表示零或者De-Normalized的数值
- ZERO: 2^(-127) * (0*2^0 + 0)
  0x00000000: 2^(-127): 0
  0x80000000: -0
- de-normalized number: but we will use 2^(-126) NOT 2^(-127)
  minimal de-normalized positive number: 0.xyz in binary format: 0.00100100101110001010011
  0x00000001: 2^(-126)*(0*2^0 + 1*2^(-23)): 1.401298464e-45
2. e = 1: 2^(-126) 
- minimal normalized positive number: 1.xyz in binary format: 1.00100100101110001010011
  0x00800000: 2^(-126)*(1*2^0): 1.175494351e-38
3. e = 127: 2^0
- ONE: 2^0*(1*2^0 + 0) = 1
  0x3F800000
4. e = 254: 2^(127)
- maximal normalized positive number:
  0x7F7FFFFF : 2^(127)*(1*2^0 + 1*2^-1 + ... 1 * 2^(-23)) = 2^(127) * 1.99999988079071044921875
               = 3.4028234663852885981170418348452e+38
5. e = 255: 2^(128)
- infinity: m == 0: 0x7F800000
- NaN     : m != 0: 0x7F800100


--- 64位浮点数Bit Pattern表示如下 ---
63 (msb)
|
| 62        52
| |         |
| |         | 51                                                 0 (lsb)
| |         | |                                                  |
X XXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
|1| <--11-->| |             <--       52      -->                |
 s    e               m
s: 符号位(sign bit)       : 1位
e: 指数位(exponential bit): 11位: the real exponential = e - 1023: [-1023, +1024]
m: 尾数位(significand bit): 52位
special patterns:
1. e = 0: 2^(-1023) just used to identify ZERO or de-normalized number
- ZERO: 2^(-1023) * (0*2^0 + 0)
  0x0000000000000000: 2^(-1023): 0
  0x8000000000000000: -0
- de-normalized number: but we will use 2^(-1022) NOT 2^(-1023)
  minimal de-normalized positive number: 0.xyz
  0x0000000000000001: 2^(-1022)*(0*2^0 + 1*2^(-52)): 4.940656458412e-324
2. e = 1: 2^(-1022) 
- minimal normalized positive number: 1.xyz
  0x0010000000000000: 2^(-1022)*(1*2^0): 2.225073858507e-308
3. e = 1023: 2^0
- ONE: 2^0*(1*2^0 + 0) = 1
  0x3FF0000000000000
4. e = 2046: 2^(1023)
- maximal normalized positive number
  0x7FEFFFFFFFFFFFFF: 2^(1023)*(1*2^0 + 1*2^-1 + ... 1 * 2^(-52)) = 1.797693134862e+308
5. e = 2047: 2^(1024)
- infinity: m == 0: 0x7FF0000000000000
- NaN     : m != 0: 0x7FF0010000000000