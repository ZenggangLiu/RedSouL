--- 16位浮点数Bit Pattern表示如下 ---
15 (msb)
|
| 14  10
| |   |
| |   | 9        0 (lsb)
| |   | |        |
v v   v v        v
X XXXXX abcdefghij
|1| 5 | |<--10-->|
 s  e        m
s: 符号位(sign bit)       :  1位
e: 指数位(exponential bit):  5位: 真正的指数为：存储的数值 - 15。可表示范围为：[-15, +16]
m: 尾数位(significand bit): 10位: 数值范围[0.5, 0.999023]
Normalized浮点数二进制表示形式为1.0010010011
十进制计算方法：S * 2^(e-15) * (1 + a*2^-1 + b*2^-2 + ... + j*2^-10)
De-Normalized浮点数二进制表示形式为0.0010010011
十进制计算方法: S * 2^(-14)  * (0 + a*2^-1 + b*2^-2 + ... + j*2^-10)

特殊Patterns：
1. 指数位为0: e = 0: 使用的指数为：2^(-15)。此Pattern用来表示零或者De-Normalized的数值
- ZERO: 符号位为：0或者1，指数位：0: 2^(-15)， 尾数位：0
  2^(-15) * (0*2^0 + 0)
  0x0000: +0
  0x8000: -0
- De-Normalized的数值: 我们使用2^(-14)而不是2^(-15)
  + 最小的de-normalized的正数: 0.xyz in binary format: 0.0010010010
    0x0001: 2^(-14)*(0*2^0 + 1*2^(-10)) = 0.000000059604644775390625
  + 最大的de-normalized的正数: 0.xyz in binary format: 0.0010010010
    0x03FF: 2^(-14)*(0*2^0 + 1*2^(-1) + ... + 1*2^(-10)) = 0.000060975551605224609375

2. 指数位为1: e = 1: 2^(-14) 
- 最小的正数: 0 000 01 00 0000 0000
  0x0400: 2^(-14)*(1*2^0) = 0.00006103515625

3. e = 15: 2^0
- ONE: 2^0*(1*2^0 + 0) = 1
  0x3C00

4. e = 30: 2^(15)
- 最大正数
  0x7BFF
  - 2^(15)*(1*2^0 + 1*2^-1 + ... 1 * 2^(-10)) = 2^(15) * 1.9990234375
          = 65504

5. e = 31: 2^(16)
- infinity: m == 0: 0x7C00
- NaN     : m != 0: 0x7C01


--- 32位浮点数Bit Pattern表示如下 ---
31 (msb)
|
| 30     23
| |      |
| |      | 22                    0 (lsb)
| |      | |                     |
v v      v v                     v
X XXXXXXXX abcdefghijklmnopqrstuvw
|1| <-8->| |<--       23      -->|
 s    e               m
s: 符号位(sign bit)       :  1位
e: 指数位(exponential bit):  8位: the real exponential = e - 127: [-127, +128]
m: 尾数位(significand bit): 23位：数值范围[0.5, 1.000000]
Normalized浮点数二进制表示形式为1.0010010011
十进制计算方法：S * 2^(e-127) * (1 + a*2^-1 + b*2^-2 + ... + w*2^-23)
De-Normalized浮点数二进制表示形式为0.0010010011
十进制计算方法: S * 2^(-126)  * (0 + a*2^-1 + b*2^-2 + ... + w*2^-23)

特殊Patterns：
1. 指数位为0: e = 0: 使用的指数为：2^(-127)。此Pattern用来表示零或者De-Normalized的数值
- ZERO: 2^(-127) * (0*2^0 + 0)
  0x00000000: 2^(-127): 0
  0x80000000: -0
- de-normalized的数值: 我们使用2^(-126)而不是2^(-127)
  + 最小的de-normalized的正数: 0.xyz in binary format: 0.00100100101110001010011
    0x00000001: 2^(-126)*(0*2^0 + 0*2^(-1) + ... + 1*2^(-23)) = 1.401298464e-45
  + 最大的de-normalized的正数: 0.xyz in binary format: 0.00100100101110001010011
    0x007FFFFF: 2^(-126)*(0*2^0 + 1*2^(-1) + ... + 1*2^(-23)) = 1.175494210692e-38

2. 指数位为1: e = 1: 2^(-126) 
- 最小的normalized正数: 1.xyz in binary format: 1.00100100101110001010011
  0x00800000: 2^(-126)*(1*2^0) = 1.175494351e-38

3. 指数位为127: e = 127: 2^0
- ONE: 2^0*(1*2^0 + 0) = 1
  0x3F800000

4. 指数位为254: e = 254: 2^(127)
- 最大的normalized的正数:
  0x7F7FFFFF : 2^(127)*(1*2^0 + 1*2^-1 + ... 1 * 2^(-23)) = 2^(127) * 1.99999988079071044921875
               = 3.4028234663852885981170418348452e+38

5. 指数位为255: e = 255: 2^(128)
- infinity: m == 0: 0x7F800000
- NaN     : m != 0: 0x7F800100


--- 64位浮点数Bit Pattern表示如下 ---
63 (msb)
|
| 62        52
| |         |
| |         | 51                                                 0 (lsb)
| |         | |                                                  |
X XXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
|1| <--11-->| |             <--       52      -->                |
 s    e               m
s: 符号位(sign bit)       :  1位
e: 指数位(exponential bit): 11位: the real exponential = e - 1023: [-1023, +1024]
m: 尾数位(significand bit): 52位：数值范围[0.5, 1.000000]
special patterns:
1. e = 0: 2^(-1023) just used to identify ZERO or de-normalized number
- ZERO: 2^(-1023) * (0*2^0 + 0)
  0x0000000000000000: 2^(-1023): 0
  0x8000000000000000: -0
- de-normalized number: but we will use 2^(-1022) NOT 2^(-1023)
  minimal de-normalized positive number: 0.xyz
  0x0000000000000001: 2^(-1022)*(0*2^0 + 1*2^(-52)): 4.940656458412e-324
2. e = 1: 2^(-1022) 
- minimal normalized positive number: 1.xyz
  0x0010000000000000: 2^(-1022)*(1*2^0): 2.225073858507e-308
3. e = 1023: 2^0
- ONE: 2^0*(1*2^0 + 0) = 1
  0x3FF0000000000000
4. e = 2046: 2^(1023)
- maximal normalized positive number
  0x7FEFFFFFFFFFFFFF: 2^(1023)*(1*2^0 + 1*2^-1 + ... 1 * 2^(-52)) = 1.797693134862e+308
5. e = 2047: 2^(1024)
- infinity: m == 0: 0x7FF0000000000000
- NaN     : m != 0: 0x7FF0010000000000



----------------- [0,1]之间的浮点数转换到[0,255]之间的整数的方法 -----------------
[]后面的数值为此数的个数: 2105376
1. integer = float * 255.0f
数值分布：整数1: [0.00392156886, 0.00784313679], 整数255: [1]
[  0]: 998277249
[  1]: 8388608  [  2]: 4210752  [  3]: 4177856  [  4]: 2105376  [  5]: 2105376  [  6]: 2105376  [  7]: 2072480  [  8]: 1052688  [  9]: 1052688    [ 10]: 1052688
[ 11]: 1052688  [ 12]: 1052688  [ 13]: 1052688  [ 14]: 1052688  [ 15]: 1019792  [ 16]: 526344   [ 17]: 526344   [ 18]: 526344   [ 19]: 526344     [ 20]: 526344
[ 21]: 526344   [ 22]: 526344   [ 23]: 526344   [ 24]: 526344   [ 25]: 526344   [ 26]: 526344   [ 27]: 526344   [ 28]: 526344   [ 29]: 526344     [ 30]: 526344
[ 31]: 493448   [ 32]: 263172   [ 33]: 263172   [ 34]: 263172   [ 35]: 263172   [ 36]: 263172   [ 37]: 263172   [ 38]: 263172   [ 39]: 263172     [ 40]: 263172
[ 41]: 263172   [ 42]: 263172   [ 43]: 263172   [ 44]: 263172   [ 45]: 263172   [ 46]: 263172   [ 47]: 263172   [ 48]: 263172   [ 49]: 263172     [ 50]: 263172
[ 51]: 263172   [ 52]: 263172   [ 53]: 263172   [ 54]: 263172   [ 55]: 263172   [ 56]: 263172   [ 57]: 263172   [ 58]: 263172   [ 59]: 263172     [ 60]: 263172
[ 61]: 263172   [ 62]: 263172   [ 63]: 230276   [ 64]: 131586   [ 65]: 131586   [ 66]: 131586   [ 67]: 131586   [ 68]: 131586   [ 69]: 131586     [ 70]: 131586
[ 71]: 131586   [ 72]: 131586   [ 73]: 131586   [ 74]: 131586   [ 75]: 131586   [ 76]: 131586   [ 77]: 131586   [ 78]: 131586   [ 79]: 131586     [ 80]: 131586
[ 81]: 131586   [ 82]: 131586   [ 83]: 131586   [ 84]: 131586   [ 85]: 131586   [ 86]: 131586   [ 87]: 131586   [ 88]: 131586   [ 89]: 131586     [ 90]: 131586
[ 91]: 131586   [ 92]: 131586   [ 93]: 131586   [ 94]: 131586   [ 95]: 131586   [ 96]: 131586   [ 97]: 131586   [ 98]: 131586   [ 99]: 131586     [100]: 131586
[101]: 131586   [102]: 131586   [103]: 131586   [104]: 131586   [105]: 131586   [106]: 131586   [107]: 131586   [108]: 131586   [109]: 131586     [110]: 131586
[111]: 131586   [112]: 131586   [113]: 131586   [114]: 131586   [115]: 131586   [116]: 131586   [117]: 131586   [118]: 131586   [119]: 131586     [120]: 131586
[121]: 131586   [122]: 131586   [123]: 131586   [124]: 131586   [125]: 131586   [126]: 131586   [127]: 98690    [128]: 65793    [129]: 65793      [130]: 65793
[131]: 65793    [132]: 65793    [133]: 65793    [134]: 65793    [135]: 65793    [136]: 65793    [137]: 65793    [138]: 65793    [139]: 65793      [140]: 65793
[141]: 65793    [142]: 65793    [143]: 65793    [144]: 65793    [145]: 65793    [146]: 65793    [147]: 65793    [148]: 65793    [149]: 65793      [150]: 65793
[151]: 65793    [152]: 65793    [153]: 65793    [154]: 65793    [155]: 65793    [156]: 65793    [157]: 65793    [158]: 65793    [159]: 65793      [160]: 65793
[161]: 65793    [162]: 65793    [163]: 65793    [164]: 65793    [165]: 65793    [166]: 65793    [167]: 65793    [168]: 65793    [169]: 65793      [170]: 65793
[171]: 65793    [172]: 65793    [173]: 65793    [174]: 65793    [175]: 65793    [176]: 65793    [177]: 65793    [178]: 65793    [179]: 65793      [180]: 65793
[181]: 65793    [182]: 65793    [183]: 65793    [184]: 65793    [185]: 65793    [186]: 65793    [187]: 65793    [188]: 65793    [189]: 65793      [190]: 65793
[191]: 65793    [192]: 65793    [193]: 65793    [194]: 65793    [195]: 65793    [196]: 65793    [197]: 65793    [198]: 65793    [199]: 65793      [200]: 65793
[201]: 65793    [202]: 65793    [203]: 65793    [204]: 65793    [205]: 65793    [206]: 65793    [207]: 65793    [208]: 65793    [209]: 65793      [210]: 65793
[211]: 65793    [212]: 65793    [213]: 65793    [214]: 65793    [215]: 65793    [216]: 65793    [217]: 65793    [218]: 65793    [219]: 65793      [220]: 65793
[221]: 65793    [222]: 65793    [223]: 65793    [224]: 65793    [225]: 65793    [226]: 65793    [227]: 65793    [228]: 65793    [229]: 65793      [230]: 65793
[231]: 65793    [232]: 65793    [233]: 65793    [234]: 65793    [235]: 65793    [236]: 65793    [237]: 65793    [238]: 65793    [239]: 65793      [240]: 65793
[241]: 65793    [242]: 65793    [243]: 65793    [244]: 65793    [245]: 65793    [246]: 65793    [247]: 65793    [248]: 65793    [249]: 65793      [250]: 65793
[251]: 65793    [252]: 65793    [253]: 65793    [254]: 65793    [255]:  1

2. integer = float * 255.99f
数值分布：整数1:[0.00390640274, 0.00781280454], 整数2: [0.00781280547, 0.0117192073], 整数255: [0.996132672, 1]
[  0]: 998244680
[  1]: 8388608  [  2]: 4194468  [  3]: 4194140  [  4]: 2097234  [  5]: 2097234  [  6]: 2097234  [  7]: 2096906  [  8]: 1048617  [  9]: 1048617    [ 10]: 1048617
[ 11]: 1048617  [ 12]: 1048617  [ 13]: 1048617  [ 14]: 1048617  [ 15]: 1048289  [ 16]: 524309   [ 17]: 524308   [ 18]: 524309   [ 19]: 524308     [ 20]: 524309
[ 21]: 524308   [ 22]: 524309   [ 23]: 524308   [ 24]: 524309   [ 25]: 524308   [ 26]: 524308   [ 27]: 524309   [ 28]: 524308   [ 29]: 524309     [ 30]: 524308
[ 31]: 523981   [ 32]: 262154   [ 33]: 262155   [ 34]: 262154   [ 35]: 262154   [ 36]: 262154   [ 37]: 262155   [ 38]: 262154   [ 39]: 262154     [ 40]: 262154
[ 41]: 262155   [ 42]: 262154   [ 43]: 262154   [ 44]: 262154   [ 45]: 262155   [ 46]: 262154   [ 47]: 262154   [ 48]: 262154   [ 49]: 262155     [ 50]: 262154
[ 51]: 262154   [ 52]: 262154   [ 53]: 262154   [ 54]: 262155   [ 55]: 262154   [ 56]: 262154   [ 57]: 262154   [ 58]: 262155   [ 59]: 262154     [ 60]: 262154
[ 61]: 262154   [ 62]: 262155   [ 63]: 261826   [ 64]: 131077   [ 65]: 131077   [ 66]: 131078   [ 67]: 131077   [ 68]: 131077   [ 69]: 131077     [ 70]: 131077
[ 71]: 131077   [ 72]: 131077   [ 73]: 131077   [ 74]: 131078   [ 75]: 131077   [ 76]: 131077   [ 77]: 131077   [ 78]: 131077   [ 79]: 131077     [ 80]: 131077
[ 81]: 131077   [ 82]: 131077   [ 83]: 131078   [ 84]: 131077   [ 85]: 131077   [ 86]: 131077   [ 87]: 131077   [ 88]: 131077   [ 89]: 131077     [ 90]: 131077
[ 91]: 131078   [ 92]: 131077   [ 93]: 131077   [ 94]: 131077   [ 95]: 131077   [ 96]: 131077   [ 97]: 131077   [ 98]: 131077   [ 99]: 131078     [100]: 131077
[101]: 131077   [102]: 131077   [103]: 131077   [104]: 131077   [105]: 131077   [106]: 131077   [107]: 131077   [108]: 131078   [109]: 131077     [110]: 131077
[111]: 131077   [112]: 131077   [113]: 131077   [114]: 131077   [115]: 131077   [116]: 131078   [117]: 131077   [118]: 131077   [119]: 131077     [120]: 131077
[121]: 131077   [122]: 131077   [123]: 131077   [124]: 131078   [125]: 131077   [126]: 131077   [127]: 130749   [128]: 65539    [129]: 65538      [130]: 65539
[131]: 65538    [132]: 65539    [133]: 65539    [134]: 65538    [135]: 65539    [136]: 65538    [137]: 65539    [138]: 65538    [139]: 65539      [140]: 65538
[141]: 65539    [142]: 65539    [143]: 65538    [144]: 65539    [145]: 65538    [146]: 65539    [147]: 65538    [148]: 65539    [149]: 65539      [150]: 65538
[151]: 65539    [152]: 65538    [153]: 65539    [154]: 65538    [155]: 65539    [156]: 65538    [157]: 65539    [158]: 65539    [159]: 65538      [160]: 65539
[161]: 65538    [162]: 65539    [163]: 65538    [164]: 65539    [165]: 65538    [166]: 65539    [167]: 65539    [168]: 65538    [169]: 65539      [170]: 65538
[171]: 65539    [172]: 65538    [173]: 65539    [174]: 65539    [175]: 65538    [176]: 65539    [177]: 65538    [178]: 65539    [179]: 65538      [180]: 65539
[181]: 65538    [182]: 65539    [183]: 65539    [184]: 65538    [185]: 65539    [186]: 65538    [187]: 65539    [188]: 65538    [189]: 65539      [190]: 65538
[191]: 65539    [192]: 65539    [193]: 65538    [194]: 65539    [195]: 65538    [196]: 65539    [197]: 65538    [198]: 65539    [199]: 65539      [200]: 65538
[201]: 65539    [202]: 65538    [203]: 65539    [204]: 65538    [205]: 65539    [206]: 65538    [207]: 65539    [208]: 65539    [209]: 65538      [210]: 65539
[211]: 65538    [212]: 65539    [213]: 65538    [214]: 65539    [215]: 65538    [216]: 65539    [217]: 65539    [218]: 65538    [219]: 65539      [220]: 65538
[221]: 65539    [222]: 65538    [223]: 65539    [224]: 65539    [225]: 65538    [226]: 65539    [227]: 65538    [228]: 65539    [229]: 65538      [230]: 65539
[231]: 65538    [232]: 65539    [233]: 65539    [234]: 65538    [235]: 65539    [236]: 65538    [237]: 65539    [238]: 65538    [239]: 65539      [240]: 65538
[241]: 65539    [242]: 65539    [243]: 65538    [244]: 65539    [245]: 65538    [246]: 65539    [247]: 65538    [248]: 65539    [249]: 65539      [250]: 65538
[251]: 65539    [252]: 65538    [253]: 65539    [254]: 65538    [255]: 64884

3. integer = float * 255.0f + 0.5f
数值分布：整数1: [0.00196078443, 0.00588235259], 整数255: [0.998039246, 1]
[  0]: 989888641
[  1]: 12599360 [  2]: 6283232  [  3]: 4210752  [  4]: 3125168  [  5]: 2105376  [  6]: 2105376  [  7]: 2105376  [  8]: 1546136  [  9]: 1052688    [ 10]: 1052688
[ 11]: 1052688  [ 12]: 1052688  [ 13]: 1052688  [ 14]: 1052688  [ 15]: 1052688  [ 16]: 756620   [ 17]: 526344   [ 18]: 526344   [ 19]: 526344     [ 20]: 526344
[ 21]: 526344   [ 22]: 526344   [ 23]: 526344   [ 24]: 526344   [ 25]: 526344   [ 26]: 526344   [ 27]: 526344   [ 28]: 526344   [ 29]: 526344     [ 30]: 526344
[ 31]: 526344   [ 32]: 361862   [ 33]: 263172   [ 34]: 263172   [ 35]: 263172   [ 36]: 263172   [ 37]: 263172   [ 38]: 263172   [ 39]: 263172     [ 40]: 263172
[ 41]: 263172   [ 42]: 263172   [ 43]: 263172   [ 44]: 263172   [ 45]: 263172   [ 46]: 263172   [ 47]: 263172   [ 48]: 263172   [ 49]: 263172     [ 50]: 263172
[ 51]: 263172   [ 52]: 263172   [ 53]: 263172   [ 54]: 263172   [ 55]: 263172   [ 56]: 263172   [ 57]: 263172   [ 58]: 263172   [ 59]: 263172     [ 60]: 263172
[ 61]: 263172   [ 62]: 263172   [ 63]: 263172   [ 64]: 164483   [ 65]: 131586   [ 66]: 131586   [ 67]: 131586   [ 68]: 131586   [ 69]: 131586     [ 70]: 131586
[ 71]: 131586   [ 72]: 131586   [ 73]: 131586   [ 74]: 131586   [ 75]: 131586   [ 76]: 131586   [ 77]: 131586   [ 78]: 131586   [ 79]: 131586     [ 80]: 131586
[ 81]: 131586   [ 82]: 131586   [ 83]: 131586   [ 84]: 131586   [ 85]: 131586   [ 86]: 131586   [ 87]: 131586   [ 88]: 131586   [ 89]: 131586     [ 90]: 131586
[ 91]: 131586   [ 92]: 131586   [ 93]: 131586   [ 94]: 131586   [ 95]: 131586   [ 96]: 131586   [ 97]: 131586   [ 98]: 131586   [ 99]: 131586     [100]: 131586
[101]: 131586   [102]: 131586   [103]: 131586   [104]: 131586   [105]: 131586   [106]: 131586   [107]: 131586   [108]: 131586   [109]: 131586     [110]: 131586
[111]: 131586   [112]: 131586   [113]: 131586   [114]: 131586   [115]: 131586   [116]: 131586   [117]: 131586   [118]: 131586   [119]: 131586     [120]: 131586
[121]: 131586   [122]: 131586   [123]: 131586   [124]: 131586   [125]: 131586   [126]: 131586   [127]: 131586   [128]: 65794    [129]: 65793      [130]: 65793
[131]: 65793    [132]: 65793    [133]: 65793    [134]: 65793    [135]: 65793    [136]: 65793    [137]: 65793    [138]: 65793    [139]: 65793      [140]: 65793
[141]: 65793    [142]: 65793    [143]: 65793    [144]: 65793    [145]: 65793    [146]: 65793    [147]: 65793    [148]: 65793    [149]: 65793      [150]: 65793
[151]: 65793    [152]: 65793    [153]: 65793    [154]: 65793    [155]: 65793    [156]: 65793    [157]: 65793    [158]: 65793    [159]: 65793      [160]: 65793
[161]: 65793    [162]: 65793    [163]: 65793    [164]: 65793    [165]: 65793    [166]: 65793    [167]: 65793    [168]: 65793    [169]: 65793      [170]: 65793
[171]: 65793    [172]: 65793    [173]: 65793    [174]: 65793    [175]: 65793    [176]: 65793    [177]: 65793    [178]: 65793    [179]: 65793      [180]: 65793
[181]: 65793    [182]: 65793    [183]: 65793    [184]: 65793    [185]: 65793    [186]: 65793    [187]: 65793    [188]: 65793    [189]: 65793      [190]: 65793
[191]: 65793    [192]: 65793    [193]: 65793    [194]: 65793    [195]: 65793    [196]: 65793    [197]: 65793    [198]: 65793    [199]: 65793      [200]: 65793
[201]: 65793    [202]: 65793    [203]: 65793    [204]: 65793    [205]: 65793    [206]: 65793    [207]: 65793    [208]: 65793    [209]: 65793      [210]: 65793
[211]: 65793    [212]: 65793    [213]: 65793    [214]: 65793    [215]: 65793    [216]: 65793    [217]: 65793    [218]: 65793    [219]: 65793      [220]: 65793
[221]: 65793    [222]: 65793    [223]: 65793    [224]: 65793    [225]: 65793    [226]: 65793    [227]: 65793    [228]: 65793    [229]: 65793      [230]: 65793
[231]: 65793    [232]: 65793    [233]: 65793    [234]: 65793    [235]: 65793    [236]: 65793    [237]: 65793    [238]: 65793    [239]: 65793      [240]: 65793
[241]: 65793    [242]: 65793    [243]: 65793    [244]: 65793    [245]: 65793    [246]: 65793    [247]: 65793    [248]: 65793    [249]: 65793      [250]: 65793
[251]: 65793    [252]: 65793    [253]: 65793    [254]: 65793    [255]: 32897

4. integer = float * 255.0f + (Real32)rand()/RAND_MAX
数值分布：整数1: [5.426e-41#DEN, 0.00783979427], 整数255: [0.996088266, 1]
[  0]: 985685498
[  1]: 16804036 [  2]: 6281255  [  3]: 4209060  [  4]: 3127116  [  5]: 2105097  [  6]: 2105399  [  7]: 2104535  [  8]: 1548088  [  9]: 1052173    [ 10]: 1052259
[ 11]: 1052347  [ 12]: 1053038  [ 13]: 1053483  [ 14]: 1052789  [ 15]: 1050539  [ 16]: 758723   [ 17]: 526016   [ 18]: 526958   [ 19]: 525681     [ 20]: 525999
[ 21]: 527277   [ 22]: 525533   [ 23]: 526194   [ 24]: 526373   [ 25]: 526427   [ 26]: 526181   [ 27]: 526768   [ 28]: 526034   [ 29]: 526389     [ 30]: 526105
[ 31]: 524954   [ 32]: 363108   [ 33]: 263811   [ 34]: 263331   [ 35]: 262633   [ 36]: 263571   [ 37]: 263180   [ 38]: 263140   [ 39]: 262929     [ 40]: 263189
[ 41]: 263673   [ 42]: 262696   [ 43]: 263166   [ 44]: 263009   [ 45]: 263198   [ 46]: 263095   [ 47]: 263562   [ 48]: 263075   [ 49]: 263036     [ 50]: 263185
[ 51]: 263095   [ 52]: 263341   [ 53]: 263313   [ 54]: 262572   [ 55]: 263751   [ 56]: 262952   [ 57]: 263123   [ 58]: 263121   [ 59]: 263602     [ 60]: 263111
[ 61]: 262972   [ 62]: 263000   [ 63]: 259099   [ 64]: 168812   [ 65]: 131584   [ 66]: 131620   [ 67]: 131188   [ 68]: 131742   [ 69]: 131642     [ 70]: 131690
[ 71]: 131678   [ 72]: 131512   [ 73]: 131563   [ 74]: 131584   [ 75]: 131631   [ 76]: 131503   [ 77]: 131696   [ 78]: 131533   [ 79]: 131575     [ 80]: 131541
[ 81]: 131562   [ 82]: 131705   [ 83]: 131645   [ 84]: 131188   [ 85]: 131907   [ 86]: 131551   [ 87]: 131526   [ 88]: 131653   [ 89]: 131612     [ 90]: 131611
[ 91]: 131425   [ 92]: 131737   [ 93]: 131545   [ 94]: 131666   [ 95]: 131340   [ 96]: 131744   [ 97]: 132017   [ 98]: 131189   [ 99]: 131526     [100]: 131787
[101]: 131341   [102]: 131837   [103]: 131378   [104]: 131299   [105]: 131993   [106]: 131393   [107]: 131720   [108]: 131492   [109]: 131680     [110]: 131572
[111]: 131416   [112]: 131858   [113]: 131440   [114]: 131381   [115]: 131682   [116]: 131821   [117]: 131735   [118]: 131267   [119]: 131730     [120]: 131599
[121]: 131669   [122]: 131126   [123]: 131832   [124]: 131500   [125]: 131745   [126]: 131533   [127]: 123330   [128]: 74064    [129]: 65798      [130]: 65808
[131]: 65729    [132]: 65747    [133]: 65938    [134]: 65550    [135]: 65953    [136]: 65997    [137]: 65496    [138]: 65699    [139]: 65809      [140]: 65856
[141]: 65914    [142]: 65727    [143]: 66071    [144]: 65555    [145]: 65756    [146]: 65895    [147]: 65846    [148]: 65548    [149]: 65938      [150]: 65774
[151]: 65728    [152]: 66100    [153]: 65694    [154]: 65676    [155]: 65811    [156]: 65867    [157]: 65671    [158]: 65870    [159]: 65635      [160]: 65873
[161]: 65762    [162]: 66054    [163]: 65502    [164]: 65779    [165]: 65793    [166]: 65753    [167]: 65931    [168]: 65792    [169]: 65645      [170]: 65868
[171]: 65824    [172]: 65789    [173]: 65855    [174]: 65825    [175]: 65498    [176]: 66290    [177]: 65489    [178]: 65734    [179]: 65988      [180]: 65741
[181]: 65649    [182]: 65791    [183]: 65914    [184]: 65773    [185]: 65892    [186]: 65692    [187]: 65772    [188]: 65808    [189]: 65913      [190]: 65787
[191]: 65755    [192]: 65828    [193]: 65700    [194]: 65834    [195]: 65783    [196]: 65968    [197]: 65447    [198]: 65831    [199]: 66092      [200]: 65579
[201]: 65708    [202]: 66052    [203]: 65696    [204]: 65630    [205]: 65878    [206]: 65812    [207]: 65781    [208]: 65798    [209]: 65738      [210]: 65871
[211]: 65916    [212]: 65514    [213]: 66061    [214]: 65739    [215]: 65561    [216]: 66086    [217]: 65844    [218]: 65391    [219]: 66119      [220]: 65639
[221]: 65787    [222]: 66042    [223]: 65466    [224]: 65959    [225]: 65768    [226]: 65713    [227]: 65860    [228]: 65842    [229]: 65722      [230]: 65849
[231]: 65598    [232]: 65911    [233]: 65888    [234]: 65577    [235]: 66003    [236]: 65651    [237]: 65946    [238]: 65796    [239]: 65749      [240]: 65897
[241]: 65610    [242]: 65822    [243]: 65648    [244]: 65897    [245]: 65713    [246]: 65906    [247]: 65616    [248]: 66048    [249]: 65920      [250]: 65577
[251]: 65837    [252]: 65904    [253]: 65744    [254]: 65777    [255]: 32865


测试代码：
const unsigned int ZERO_PATTERN             = 0x00000000;
const unsigned int MAX_DE_NORMALIZED_NUMBER = 0x007FFFFF;
const unsigned int MIN_NORMALIZED_NUMBER    = 0x00800000;
const unsigned int ONE_PATTERN              = 0x3F800000;
union Int2Float
{

    unsigned int pattern;
    float value;
};

unsigned int distribute[256] = { 0 };
std::vector<float> detail_distribute[256];
for (unsigned int c = ZERO_PATTERN; c <= ONE_PATTERN; ++c)
{
    const float value = Int2Float{ c }.value;
    const unsigned char uint8 = (unsigned char)(value * 255.0 + (float)std::rand()/RAND_MAX);
    distribute[uint8]++;
    // 存入0的数值实在是太多
    if (uint8)detail_distribute[uint8].push_back(value);
}

for (unsigned int c = 0; c <= 255; ++c)
{
    std::printf("[%3d]: %2d\t", c, distribute[c]);
    if ((c % 10) == 0) std::printf("\n");
}
